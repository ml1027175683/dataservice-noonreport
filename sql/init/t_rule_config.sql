INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (8, 'getFirstDataUtctime', '获取当日原始数据第一条的时间（UTC）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getFirstDataUtctime 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getFirstDataUtctime(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(0).getStr(\"utcTime\"))\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (9, 'getLastDataUtctime', '获取当日原始数据最后一条的时间（UTC）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getLastDataUtctime 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getLastDataUtctime(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(data.size()-1).getStr(\"utcTime\"))\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (10, 'getDataSize', '当日原始数据点数（数据量：条）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getDataSize 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getDataSize(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.size())\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (11, 'getReportLengthHrsSoms', 'SOMS报告时长（小时）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getReportLengthHrssoms 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getReportLengthHrsSoms(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    def startDate = data.get(0).getDate(\"utcTime\")\n    def endDate = data.get(data.size() - 1).getDate(\"utcTime\")\n    def decimal = new BigDecimal(endDate.getTime()).subtract(new BigDecimal(startDate.getTime()))\n    def i = 1000*60*60\n    def value = decimal.divide(i,2,BigDecimal.ROUND_HALF_UP).doubleValue()\n    resultMap.put(code,value)\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (13, 'getLastLon', '经度（船位）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getLastLon 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getLastLon(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(data.size()-1).getDouble(\"lon\"))\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (14, 'getLastLat', '纬度（船位）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getLastLat 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getLastLat(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(data.size()-1).getDouble(\"lat\"))\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (15, 'getLastTimeZone', '获取时区', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getLastTimeZone 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getLastTimeZone(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(data.size()-1).getDouble(\"timeZone\"))\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (16, 'getLastReportDate', '报告日期', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getLastReportDate 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getLastReportDate(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(data.size()-1).getStr(\"localDate\"))\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (17, 'getLastReportDateLt', '报告时间（LT）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getLastReportDateLt 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getLastReportDateLt(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    def date = data.get(data.size() - 1).getStr(\"localDate\") + \" 12:00:00\"\n    resultMap.put(code, date)\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (18, 'getLastReportDateUTCtime', '报告时间（UTC）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\nimport org.apache.commons.lang3.StringUtils\n\nimport java.time.LocalDateTime\nimport java.time.ZoneId\nimport java.time.ZoneOffset\nimport java.time.ZonedDateTime\nimport java.time.format.DateTimeFormatter\n\n/**\n * getLastReportDateUTCtime 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getLastReportDateUTCtime(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    String originalDateTimeString = resultMap.get(\"noonreport_lt\");\n\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n\n    LocalDateTime originalDateTime = LocalDateTime.parse(originalDateTimeString, formatter);\n    Integer timeZone= resultMap.get(\"time_zone\");\n    ZoneId originalZone =null;\n    if (!StringUtils.contains(String.valueOf(timeZone),\"-\")){\n\n        originalZone = ZoneId.of(  \"UTC+\"+timeZone);\n    }else {\n        originalZone = ZoneId.of(  \"UTC\"+timeZone);\n    }\n\n    // 将原始时间转换为UTC时间\n    ZonedDateTime originalZonedDateTime = originalDateTime.atZone(originalZone);\n    ZonedDateTime utcZonedDateTime = originalZonedDateTime.withZoneSameInstant(ZoneOffset.UTC);\n    // 格式化输出UTC时间\n    DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n    String formattedUtcDateTime = utcZonedDateTime.format(outputFormatter);\n    resultMap.put(code,formattedUtcDateTime)\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (19, 'getReportLengthHrs', '报告时长（小时）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getReportLengthHrs 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getReportLengthHrs(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    if (!Objects.isNull(firstReport)) {\n        def firstDate = JSONUtil.parseObj(firstReport.getReportMsg()) .getDate(\"noonreport_utctime\")\n        def lastDate =  JSONUtil.parseObj(resultMap).getDate(\"noonreport_utctime\")\n\n        def subtract = new BigDecimal(lastDate.getTime()).subtract(new BigDecimal(firstDate.getTime()))\n\n        def decimal = new BigDecimal(1000 * 60 * 60)\n        def value = subtract.divide(decimal, 1, BigDecimal.ROUND_UP).doubleValue()\n        if (value<30){\n            resultMap.put(code,value);\n        }\n\n\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (20, 'getVesselLoading', '船舶载重', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * getVesselLoading 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getVesselLoading(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(data.size()-1).getStr(\"vesselLoading\"))\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (21, 'getObservedSpeedNmH', '观测速度（对地）_nm_H', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getObservedSpeedNmH 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getObservedSpeedNmH(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def obj = JSONUtil.parseObj(resultMap)\n    def timesHour = obj.getDouble(\"report_Length_Hrs_soms\")\n    def stramingDis = obj.getDouble(\"steaming_distance\")\n    if (!Objects.is(timesHour)&&!Objects.is(stramingDis)) {\n        def speed = stramingDis / timesHour\n        resultMap.put(code,speed)\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (22, 'getObservedSpeedKn', '观测速度（对地）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getObservedSpeedKn 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getObservedSpeedKn(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    for (JSONObject jsonObject : data) {\n        Double speedKnots = jsonObject.getDouble(\"speedKnots\");\n        if (!Objects.isNull(speedKnots)) {\n            redataList.add(jsonObject);\n        }\n    }\n    def totalspeed = 0d;\n    for (JSONObject obj : redataList) {\n        Double speedKnots = obj.getDouble(\"speedKnots\");\n        totalspeed+=speedKnots;\n    }\n    if (redataList.size()>0){\n        def value = totalspeed / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (23, 'getObservedSpeed_0_5kn', '观测速度（0.5kn）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\nimport org.omg.CORBA.OBJ_ADAPTER\n\n\n/**\n * getObservedSpeedNmH 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getObservedSpeed_0_5kn(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    def obj = JSONUtil.parseObj(resultMap)\n    def obsSpdkn = obj.getDouble(\"observed_speed_kn\")\n    if (!Objects.isNull(obsSpdkn)) {\n            for (int i = 0; i < 51; i++) {\n                double value = 0 + i * 0.5;\n                double min = -0.25 + value;\n                double max = 0.25 + value;\n                if (obsSpdkn>=min&&obsSpdkn<max){\n                    resultMap.put(code,value)\n                    break;\n                }\n            }\n        \n\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (24, 'getMeload', '主机负荷', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getMeload 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getMeload(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    for (JSONObject jsonObject : data) {\n        Double meLoadCal = jsonObject.getDouble(\"meLoadCal\");\n        if (!Objects.isNull(meLoadCal)) {\n            redataList.add(jsonObject);\n        }\n    }\n    def totalMeLoadCal = 0d;\n    for (JSONObject obj : redataList) {\n        Double meLoadCal = obj.getDouble(\"meLoadCal\");\n        totalMeLoadCal+=meLoadCal;\n    }\n    if (redataList.size()>0){\n        def value = totalMeLoadCal / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (25, 'getMeConsMt', '主机日耗油量（吨）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getMeConsMt 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getMeConsMt(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode = \"meOnTime\"\n    def timestamp = \"timestamp\"\n    BigDecimal sumData = new BigDecimal(0);\n    for (int i = 0; i < data.size(); i++) {\n        if (i == 0) {\n            Double adouble = data.get(i).getDouble(MapCode);\n            if (!Objects.isNull(adouble)) {\n                BigDecimal bdouble = new BigDecimal(adouble).multiply(new BigDecimal(5 / 60));\n                sumData = sumData.add(bdouble);\n            }\n\n        }\n        if (i > 0 && i < data.size()) {\n            JSONObject perData = data.get(i - 1);\n            JSONObject currentData = data.get(i);\n            Long perTimestamp = perData.getLong(timestamp);\n            Double cDouble = currentData.getDouble(MapCode);\n            Long currentTimestamp = currentData.getLong(timestamp);\n            double fiveMin = (currentTimestamp - perTimestamp) / 3600d;\n            if (!Objects.isNull(cDouble)) {\n                BigDecimal res = new BigDecimal(cDouble).multiply(new BigDecimal(fiveMin));\n                sumData = sumData.add(res);\n            }\n\n\n        }\n    }\n    resultMap.put(code, sumData.doubleValue())\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (26, 'getAeConsMt', '发电机组总日耗油量（吨）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getAeConsMt 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getAeConsMt(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode = \"auxOnTime\"\n    def timestamp = \"timestamp\"\n    BigDecimal sumData = new BigDecimal(0);\n    for (int i = 0; i < data.size(); i++) {\n        if (i == 0) {\n            Double adouble = data.get(i).getDouble(MapCode);\n            if (!Objects.isNull(adouble)) {\n                BigDecimal bdouble = new BigDecimal(adouble).multiply(new BigDecimal(5 / 60));\n                sumData = sumData.add(bdouble);\n            }\n\n        }\n        if (i > 0 && i < data.size()) {\n            JSONObject perData = data.get(i - 1);\n            JSONObject currentData = data.get(i);\n            Long perTimestamp = perData.getLong(timestamp);\n            Double cDouble = currentData.getDouble(MapCode);\n            Long currentTimestamp = currentData.getLong(timestamp);\n            double fiveMin = (currentTimestamp - perTimestamp) / 3600d;\n            if (!Objects.isNull(cDouble)) {\n                BigDecimal res = new BigDecimal(cDouble).multiply(new BigDecimal(fiveMin));\n                sumData = sumData.add(res);\n            }\n\n\n        }\n    }\n    resultMap.put(code, sumData.doubleValue())\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (27, 'getBoilerConsMt', '锅炉总日耗油量（吨）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getBoilerConsMt 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getBoilerConsMt(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode = \"boilerOnTime\"\n    def timestamp = \"timestamp\"\n    BigDecimal sumData = new BigDecimal(0);\n    for (int i = 0; i < data.size(); i++) {\n        if (i == 0) {\n            Double adouble = data.get(i).getDouble(MapCode);\n            if (!Objects.isNull(adouble)) {\n                BigDecimal bdouble = new BigDecimal(adouble).multiply(new BigDecimal(5 / 60));\n                sumData = sumData.add(bdouble);\n            }\n\n        }\n        if (i > 0 && i < data.size()) {\n            JSONObject perData = data.get(i - 1);\n            JSONObject currentData = data.get(i);\n            Long perTimestamp = perData.getLong(timestamp);\n            Double cDouble = currentData.getDouble(MapCode);\n            Long currentTimestamp = currentData.getLong(timestamp);\n            double fiveMin = (currentTimestamp - perTimestamp) / 3600d;\n            if (!Objects.isNull(cDouble)) {\n                BigDecimal res = new BigDecimal(cDouble).multiply(new BigDecimal(fiveMin));\n                sumData = sumData.add(res);\n            }\n\n\n        }\n    }\n    resultMap.put(code, sumData.doubleValue())\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (28, 'getTotalFoConsMt', '总日耗油量（吨）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getTotalFoConsMt 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getTotalFoConsMt(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(\"me_cons_mt\")\n    def bDouble = obj.getDouble(\"ae_cons_mt\")\n    def cDouble = obj.getDouble(\"boiler_cons_mt\")\n    if (!Objects.isNull(aDouble)&&!Objects.isNull(bDouble)&&!Objects.isNull(cDouble)) {\n        def value = aDouble + bDouble + cDouble\n        resultMap.put(code,value) ;\n    }\n   \n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (29, 'getMeRunningHours', '主机总运行时长（h）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getMeRunningHours 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getMeRunningHours(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    int realData = 0;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"rotation\")\n        def bDouble = obj.getDouble(\"shaft_power\")\n        if (!Objects.isNull(aDouble) && !Objects.isNull(bDouble)) {\n            if (aDouble >= 1 && bDouble > 50) {\n                realData++;\n            }\n        }\n    }\n    resultMap.put(code,realData*(5/60)) ;\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (30, 'remarksSoms', 'SOMS生成备注', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\nimport com.zdiai.noonreport.vo.MergeGroupVo\n\n\n/**\n * remarksSoms 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\n\ndef remarksSoms(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def dataCode = \"timeZone\"\n    List<MergeGroupVo> mergeGroupPoList = new ArrayList<>();\n\n    for (int i = 0; i < data.size(); i++) {\n        MergeGroupVo mergeGroupVo = new MergeGroupVo();\n        mergeGroupPoList.add(mergeGroupVo);\n        def dataObj = data.get(i)\n        Integer timeZone = dataObj.getInt(dataCode);\n        mergeGroupVo.setStartIndex(i);\n        mergeGroupVo.setTimeZone(timeZone);\n        for (int j = i; j < data.size(); j++) {\n            def endDataObj = data.get(j)\n            Integer endTimeZone = endDataObj.getInt(dataCode);\n            mergeGroupVo.setEndIndex(j);\n            if (timeZone==endTimeZone) {\n                if (j == data.size() - 1) {\n                    i=j;\n                    break;\n                }\n            } else {\n                //i++ 与j++ 减2次\n                i = j-1;\n                break;\n            }\n\n        }\n\n    }\n\n\n    MergeGroupVo start = mergeGroupPoList.get(0);\n    MergeGroupVo end = mergeGroupPoList.get(mergeGroupPoList.size()-1);\n    Integer startTimeZone = start.getTimeZone();\n    Integer endTimeZone = end.getTimeZone();\n    if (10<=startTimeZone&&startTimeZone<=12){\n        if (-12<=endTimeZone&&endTimeZone<=-10){\n            resultMap.put(code,\"Cross the date line eastward\")\n        }\n    }else if (-12<=startTimeZone&&startTimeZone<=-10){\n        if (10<=endTimeZone&&endTimeZone<=12){\n            resultMap.put(code,\"Cross the date line westward\")\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (31, 'getSteamingDistance', '航行距离', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * getSteamingDistance 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef getSteamingDistance(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode = \"speedKnots\"\n    def timestamp = \"timestamp\"\n    BigDecimal sumData = new BigDecimal(0);\n    for (int i = 0; i < data.size(); i++) {\n        if (i == 0) {\n            Double adouble = data.get(i).getDouble(MapCode);\n            if (!Objects.isNull(adouble)) {\n                BigDecimal bdouble = new BigDecimal(adouble).multiply(new BigDecimal(5 / 60));\n                sumData = sumData.add(bdouble);\n            }\n\n        }\n        if (i > 0 && i < data.size()) {\n            JSONObject perData = data.get(i - 1);\n            JSONObject currentData = data.get(i);\n            Long perTimestamp = perData.getLong(timestamp);\n            Double cDouble = currentData.getDouble(MapCode);\n            Long currentTimestamp = currentData.getLong(timestamp);\n            double fiveMin = (currentTimestamp - perTimestamp) / 3600d;\n            if (!Objects.isNull(cDouble)) {\n                BigDecimal res = new BigDecimal(cDouble).multiply(new BigDecimal(fiveMin));\n                sumData = sumData.add(res);\n            }\n\n\n        }\n    }\n    resultMap.put(code, sumData.doubleValue())\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (32, 'steamingTime', '航行时间（主机运行/定速）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\nimport java.math.RoundingMode\n\n\n/**\n * steamingTime 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef steamingTime(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    int realData = 0;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"speedKnots\")\n        if (!Objects.isNull(aDouble)) {\n            if (aDouble <= 3) {\n                realData++;\n            }\n        }\n    }\n\n    def fiveMin = 5 / 60\n    Double value = realData* fiveMin\n\n    def obj = JSONUtil.parseObj(resultMap)\n    Double aDouble = obj.getDouble(\"report_length_hrs\")\n\n\n    if (!Objects.isNull(aDouble)) {\n\n        def doubleValue = new BigDecimal(aDouble).subtract(new BigDecimal(value)).doubleValue()\n        resultMap.put(code, doubleValue) ;\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (33, 'windSpeedSoms', '风速-风速风向仪（相对）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * windSpeedSoms 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef windSpeedSoms(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"windSpeed\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    def totalValue = 0d;\n    for (JSONObject obj : redataList) {\n        Double dataValue = obj.getDouble(dataCode);\n        totalValue+=dataValue;\n    }\n    def value = totalValue / redataList.size()\n    resultMap.put(code,value)\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (34, 'windDiretionSoms', '风向-风速风向仪（相对）', NULL, 'package com.zdiai.noonreport.utils.grovy\r\n\r\nimport cn.hutool.json.JSONObject\r\nimport com.zdiai.noonreport.entity.NoonReport\r\n\r\n\r\n/**\r\n * windDiretionSoms 规则\r\n * @param data\r\n * @param resultMap\r\n * @param code\r\n * @return\r\n */\r\ndef windDiretionSoms(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\r\n\r\n    ArrayList<JSONObject> redataList = new ArrayList<>();\r\n\r\n    def dataCode = \"windDirection\"\r\n    for (JSONObject jsonObject : data) {\r\n        Double dataValue = jsonObject.getDouble(dataCode);\r\n        if (!Objects.isNull(dataValue)) {\r\n            redataList.add(jsonObject);\r\n        }\r\n    }\r\n    def totalValue = 0d;\r\n    for (JSONObject obj : redataList) {\r\n        Double dataValue = obj.getDouble(dataCode);\r\n        totalValue+=dataValue;\r\n    }\r\n    if (redataList.size()>0){\r\n        def value = totalValue / redataList.size()\r\n        resultMap.put(code,value)\r\n    }\r\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (35, 'windScaleBf', '风力等级（BF）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.constant.WindScaleLevel\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * windScaleBf 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef windScaleBf(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(\"wind_speed_soms\")\n    if (!Objects.isNull(aDouble)) {\n        def level = WindScaleLevel.getLevel(aDouble)\n        resultMap.put(code,level)\n\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (36, 'no1_dg_power', '1号发电机功率（kW）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * no1_dg_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef no1_dg_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"ae_no1_power\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (37, 'no2_dg_power', '2号发电机功率（kW）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * no2_dg_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef no2_dg_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"ae_no2_power\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (38, 'no3_dg_power', '3号发电机功率（kW）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * no2_dg_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef no3_dg_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"ae_no2_power\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (39, 'no4_dg_power', '4号发电机功率（kW）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * no4_dg_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef no4_dg_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"ae_no4_power\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (40, 'ae_no1_power', '1号发电机运行时间（h）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no1_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no1_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    int realData = 0;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"ae_no1_power\")\n\n        if (!Objects.isNull(aDouble) ) {\n            if (aDouble >0) {\n                realData++;\n            }\n        }\n    }\n\n    if (realData > 0) {\n        def fiveMin = 5 / 60\n        resultMap.put(code, realData * fiveMin);\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (41, 'ae_no2_power', '2号发电机运行时间（h）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no2_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no2_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    int realData = 0;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"ae_no2_power\")\n\n        if (!Objects.isNull(aDouble) ) {\n            if (aDouble >0) {\n                realData++;\n            }\n        }\n    }\n\n    if (realData > 0) {\n        def fiveMin = 5 / 60\n        resultMap.put(code, realData * fiveMin);\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (42, 'ae_no3_power', '3号发电机运行时间（h）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no3_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no3_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    int realData = 0;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"ae_no3_power\")\n\n        if (!Objects.isNull(aDouble) ) {\n            if (aDouble >0) {\n                realData++;\n            }\n        }\n    }\n\n       if (realData > 0) {\n        def fiveMin = 5 / 60\n        resultMap.put(code, realData * fiveMin);\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (43, 'ae_no4_power', '4号发电机运行时间（h）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no4_power 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no4_power(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    int realData = 0;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"ae_no4_power\")\n\n        if (!Objects.isNull(aDouble) ) {\n            if (aDouble >0) {\n                realData++;\n            }\n        }\n    }\n\n       if (realData > 0) {\n        def fiveMin = 5 / 60\n        resultMap.put(code, realData * fiveMin);\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (44, 'ae_no1_load', '1号发电机负荷', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no1_load 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no1_load(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode1 = \"ae_no1_power\";\n    def MapCode2 = \"no1_dg_rated_power\";\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(MapCode1)\n    def bDouble = obj.getDouble(MapCode2)\n    if (!Objects.isNull(aDouble) && !Objects.isNull(bDouble)) {\n        resultMap.put(code, aDouble/bDouble)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (45, 'ae_no2_load', '2号发电机负荷', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no2_load 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no2_load(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode1 = \"ae_no2_power\";\n    def MapCode2 = \"no2_dg_rated_power\";\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(MapCode1)\n    def bDouble = obj.getDouble(MapCode2)\n    if (!Objects.isNull(aDouble) && !Objects.isNull(bDouble)) {\n        resultMap.put(code, aDouble/bDouble)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (46, 'ae_no3_load', '3号发电机负荷', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no3_load 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no3_load(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode1 = \"ae_no3_power\";\n    def MapCode2 = \"no3_dg_rated_power\";\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(MapCode1)\n    def bDouble = obj.getDouble(MapCode2)\n    if (!Objects.isNull(aDouble) && !Objects.isNull(bDouble)) {\n        resultMap.put(code, aDouble/bDouble)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (47, 'ae_no4_load', '4号发电机负荷', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * ae_no4_load 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef ae_no4_load(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode1 = \"ae_no4_power\";\n    def MapCode2 = \"no4_dg_rated_power\";\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(MapCode1)\n    def bDouble = obj.getDouble(MapCode2)\n    if (!Objects.isNull(aDouble) && !Objects.isNull(bDouble)) {\n        resultMap.put(code, aDouble/bDouble)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (53, 'observedSpeedRealtime', '实时速度（对地）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n/**\n * observedSpeedRealtime 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef observedSpeedRealtime(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    resultMap.put(code,data.get(data.size()-1).getDouble(\"speedKnots\"))\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (54, 'heading', '船艏向', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * heading 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef heading(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"hdt\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (55, 'foreDraft', '艏吃水', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * heading 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef foreDraft(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"foreDraft\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (56, 'aftDraft', '艉吃水', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * aftDraft 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef aftDraft(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"aftDraft\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (57, 'draft', '平均吃水', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * draft 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef draft(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"draft\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (58, 'slipRate', '滑失率', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * slipRate 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef slipRate(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"slipRate\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (59, 'meRpm', '主机转速', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * meRpm 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef meRpm(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"rotation\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (60, 'me_no1_exhaust_temp_max', '主机1号气缸排气温度-最大值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no1_exhaust_temp_max 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no1_exhaust_temp_max(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_1_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble>result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (61, 'me_no2_exhaust_temp_max', '主机2号气缸排气温度-最大值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no2_exhaust_temp_max.groovy 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no2_exhaust_temp_max(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_2_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble>result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (62, 'me_no3_exhaust_temp_max', '主机3号气缸排气温度-最大值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no3_exhaust_temp_max.groovy 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no3_exhaust_temp_max(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_3_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble>result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (63, 'me_no4_exhaust_temp_max', '主机4号气缸排气温度-最大值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no4_exhaust_temp_max.groovy 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no4_exhaust_temp_max(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_4_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble>result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (64, 'me_no5_exhaust_temp_max', '主机5号气缸排气温度-最大值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no5_exhaust_temp_max.groovy 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no5_exhaust_temp_max(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_5_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble>result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (65, 'me_no6_exhaust_temp_max', '主机6号气缸排气温度-最大值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no6_exhaust_temp_max.groovy 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no6_exhaust_temp_max(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_6_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble>result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (66, 'me_no7_exhaust_temp_max', '主机7号气缸排气温度-最大值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no7_exhaust_temp_max.groovy 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no7_exhaust_temp_max(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_7_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble>result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (67, 'me_no1_exhaust_temp_min', '主机1号气缸排气温度-最小值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no1_exhaust_temp_min 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no1_exhaust_temp_min(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_1_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble<result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (68, 'me_no2_exhaust_temp_min', '主机2号气缸排气温度-最小值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no2_exhaust_temp_min 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no2_exhaust_temp_min(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_2_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble<result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (69, 'me_no3_exhaust_temp_min', '主机3号气缸排气温度-最小值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no3_exhaust_temp_min 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no3_exhaust_temp_min(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_3_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble<result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (70, 'me_no4_exhaust_temp_min', '主机4号气缸排气温度-最小值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no4_exhaust_temp_min 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no4_exhaust_temp_min(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_4_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble<result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (71, 'me_no5_exhaust_temp_min', '主机5号气缸排气温度-最小值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no5_exhaust_temp_min 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no5_exhaust_temp_min(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_5_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble<result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (72, 'me_no6_exhaust_temp_min', '主机6号气缸排气温度-最小值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no6_exhaust_temp_min 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no6_exhaust_temp_min(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_6_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble<result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (73, 'me_no7_exhaust_temp_min', '主机7号气缸排气温度-最小值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no7_exhaust_temp_min 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no7_exhaust_temp_min(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n    Double result=null;\n    for (JSONObject obj : data) {\n        def aDouble = obj.getDouble(\"me_cyl_7_exh_gas_out_temp\")\n        if (!Objects.isNull(aDouble)) {\n            if (!Objects.isNull(result)){\n                if (aDouble<result){\n                    result=aDouble;\n                }\n            }else {\n                result=aDouble;\n            }\n        }\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (74, 'me_no1_exhaust_temp_mean', '主机1号气缸排气温度-平均值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no1_exhaust_temp_mean 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no1_exhaust_temp_mean(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"me_cyl_1_exh_gas_out_temp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (75, 'me_no2_exhaust_temp_mean', '主机2号气缸排气温度-平均值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no2_exhaust_temp_mean 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no2_exhaust_temp_mean(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"me_cyl_2_exh_gas_out_temp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (76, 'me_no3_exhaust_temp_mean', '主机3号气缸排气温度-平均值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no3_exhaust_temp_mean 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no3_exhaust_temp_mean(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"me_cyl_3_exh_gas_out_temp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (77, 'me_no4_exhaust_temp_mean', '主机4号气缸排气温度-平均值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no4_exhaust_temp_mean 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no4_exhaust_temp_mean(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"me_cyl_4_exh_gas_out_temp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (78, 'me_no5_exhaust_temp_mean', '主机5号气缸排气温度-平均值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no5_exhaust_temp_mean 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no5_exhaust_temp_mean(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"me_cyl_5_exh_gas_out_temp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (79, 'me_no6_exhaust_temp_mean', '主机6号气缸排气温度-平均值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no6_exhaust_temp_mean 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no6_exhaust_temp_mean(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"me_cyl_6_exh_gas_out_temp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (80, 'me_no7_exhaust_temp_mean', '主机7号气缸排气温度-平均值', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * me_no7_exhaust_temp_mean 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef me_no7_exhaust_temp_mean(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"me_cyl_7_exh_gas_out_temp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (81, 'sigWaveHgtWni', '浪高_WNI', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * sigWaveHgtWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef sigWaveHgtWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"sigwh\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n    \n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (82, 'waveScale', '浪高等级_WNI', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.constant.WaveScaleLevel\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * waveScale 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef waveScale(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(\"wave_scale\")\n    if (!Objects.isNull(aDouble)) {\n        def level = WaveScaleLevel.getLevel(aDouble)\n        resultMap.put(code,level)\n\n    }\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (83, 'currentVelocityWni', '流速_WNI', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * currentVelocityWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef currentVelocityWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"ocs\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (84, 'currentDirectionWni', '流向_WNI (Going To)', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * currentDirectionWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef currentDirectionWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"ocd\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            if (dataValue>=1&&dataValue<=16){\n                redataList.add(jsonObject);\n            }\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        Integer value = (Integer) (totalValue / redataList.size())\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (85, 'waveDirectionWni', '海浪方向_WNI (Coming From)', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * waveDirectionWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef waveDirectionWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"wsd\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            if (dataValue>=1&&dataValue<=16){\n                redataList.add(jsonObject);\n            }\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        Integer value = (Integer) (totalValue / redataList.size())\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (86, 'windSpeedWni', '风速_WNI', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * windSpeedWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef windSpeedWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"was\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (87, 'windDirectionWni', '风向_WNI (Coming From)', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * windDirectionWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef windDirectionWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"wadComeFrom\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            if (dataValue>=1&&dataValue<=16){\n                redataList.add(jsonObject);\n            }\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        Integer value = (Integer) (totalValue / redataList.size())\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (89, 'course', '航向', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * course 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef course(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"course\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (90, 'meOutputPower', '主机输出功率', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * meOutputPower 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef meOutputPower(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"shaftPower\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (93, 'swellwaveHeightWni', '涌浪高_WNI', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * swellwaveHeightWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef swellwaveHeightWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"pswh\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (94, 'swellwaveDirectionWni', '涌浪方向_WNI (Coming From)', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * swellwaveDirectionWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef swellwaveDirectionWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"pswd\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            if (dataValue>=1&&dataValue<=16){\n                redataList.add(jsonObject);\n            }\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        Integer value = (Integer) (totalValue / redataList.size())\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (95, 'seaSurfacePressureWni', '海面气压_WNI', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * seaSurfacePressureWni 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef seaSurfacePressureWni(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"ssp\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (96, 'meConsMt24h', '主机日耗油量_24h（吨）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * meConsMt24h 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef meConsMt24h(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode1 = \"report_length_hrs\";\n    def MapCode2 = \"me_cons_mt\";\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(MapCode1)\n    def bDouble = obj.getDouble(MapCode2)\n    if (!Objects.isNull(aDouble)&&!Objects.isNull(bDouble)){\n        if (aDouble==0){\n            resultMap.put(code, 0d)\n        }else {\n            resultMap.put(code,bDouble*(24/aDouble))\n        }\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (97, 'aeConsMt24h', '发电机组总日耗油量_24h（吨）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport cn.hutool.json.JSONUtil\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * aeConsMt24h 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef aeConsMt24h(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode1 = \"report_length_hrs\";\n    def MapCode2 = \"ae_cons_mt\";\n    def obj = JSONUtil.parseObj(resultMap)\n    def aDouble = obj.getDouble(MapCode1)\n    def bDouble = obj.getDouble(MapCode2)\n    if (!Objects.isNull(aDouble)&&!Objects.isNull(bDouble)){\n        if (aDouble==0){\n            resultMap.put(code, 0d)\n        }else {\n            resultMap.put(code,bDouble*(24/aDouble))\n        }\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (98, 'stw', '对水速度', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * stw 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef stw(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    ArrayList<JSONObject> redataList = new ArrayList<>();\n\n    def dataCode = \"stw\"\n    for (JSONObject jsonObject : data) {\n        Double dataValue = jsonObject.getDouble(dataCode);\n        if (!Objects.isNull(dataValue)) {\n            redataList.add(jsonObject);\n        }\n    }\n\n    if (redataList.size()>0){\n        def totalValue = 0d;\n        for (JSONObject obj : redataList) {\n            Double dataValue = obj.getDouble(dataCode);\n            totalValue+=dataValue;\n        }\n        def value = totalValue / redataList.size()\n        resultMap.put(code,value)\n    }\n\n\n}', NULL, NULL, 1);
INSERT INTO `t_rule_config` (`id`, `func_name`, `func_desc`, `formula_body`, `groovy_body`, `python_body`, `lua_body`, `deal_type`) VALUES (99, 'meWork', '主机功（kWh）', NULL, 'package com.zdiai.noonreport.utils.grovy\n\nimport cn.hutool.json.JSONObject\nimport com.zdiai.noonreport.entity.NoonReport\n\n\n/**\n * meWork 规则\n * @param data\n * @param resultMap\n * @param code\n * @return\n */\ndef meWork(List<JSONObject> data, HashMap resultMap, String code, NoonReport firstReport) {\n\n    def MapCode = \"shaftPower\"\n    def timestamp = \"timestamp\"\n    BigDecimal sumData = new BigDecimal(0);\n    for (int i = 0; i < data.size(); i++) {\n        if (i == 0) {\n            Double adouble = data.get(i).getDouble(MapCode);\n            if (!Objects.isNull(adouble)) {\n                BigDecimal bdouble = new BigDecimal(adouble).multiply(new BigDecimal(5 / 60));\n                sumData = sumData.add(bdouble);\n            }\n\n        }\n        if (i > 0 && i < data.size()) {\n            JSONObject perData = data.get(i - 1);\n            JSONObject currentData = data.get(i);\n            Long perTimestamp = perData.getLong(timestamp);\n            Double cDouble = currentData.getDouble(MapCode);\n            Long currentTimestamp = currentData.getLong(timestamp);\n            double fiveMin = (currentTimestamp - perTimestamp) / 3600d;\n            if (!Objects.isNull(cDouble)) {\n                BigDecimal res = new BigDecimal(cDouble).multiply(new BigDecimal(fiveMin)).divide(new BigDecimal(0.97),12,BigDecimal.ROUND_HALF_UP);\n                sumData = sumData.add(res);\n            }\n\n\n        }\n    }\n    resultMap.put(code, sumData.doubleValue())\n\n}', NULL, NULL, 1);
